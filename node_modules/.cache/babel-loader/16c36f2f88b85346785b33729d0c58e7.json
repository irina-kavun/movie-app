{"ast":null,"code":"import { TYPES } from \"./types\";\nimport { all, put, delay, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { getTotalMovies, getMoviesSuccess, getMoviesError, getLiveSearchMoviesSuccess, getLiveSearchMoviesError } from \"./actions\";\nimport { setSearchFilters } from \"../Search/actions\";\nimport api from \"../../api\";\n\nfunction* watchGetMovies() {\n  yield takeEvery(TYPES.GET_MOVIES, getMoviesSaga);\n  yield takeLatest(TYPES.GET_LIVESEARCH_MOVIES, getLiveSearchMoviesSaga);\n}\n\nfunction* getMoviesSaga(action) {\n  try {\n    const {\n      params\n    } = action;\n    const response = yield api.getMovies({\n      params: { ...params\n      }\n    });\n\n    if (response.data.Error) {\n      throw new Error(response.data.Error);\n    }\n\n    const data = response.data.Search;\n    const totalMovies = response.data.totalResults;\n    yield all([put(getMoviesSuccess(data)), put(getTotalMovies(totalMovies))]);\n  } catch (e) {\n    yield put(getMoviesError());\n  }\n}\n\nfunction* getLiveSearchMoviesSaga(action) {\n  const {\n    params\n  } = action;\n\n  try {\n    yield delay(400);\n    const response = yield api.getMovies({\n      params: { ...params\n      }\n    });\n\n    if (response.data.Error) {\n      throw new Error(response.data.Error);\n    }\n\n    const data = response.data.Search;\n    yield all([put(getLiveSearchMoviesSuccess(data)), put(setSearchFilters(params))]);\n  } catch (e) {\n    yield all([put(getLiveSearchMoviesError()), put(setSearchFilters(params))]);\n  }\n}\n\nexport default watchGetMovies;","map":{"version":3,"sources":["/Users/irinakavun/WebstormProjects/movie-app/src/containers/Movies/sagas.js"],"names":["TYPES","all","put","delay","takeEvery","takeLatest","getTotalMovies","getMoviesSuccess","getMoviesError","getLiveSearchMoviesSuccess","getLiveSearchMoviesError","setSearchFilters","api","watchGetMovies","GET_MOVIES","getMoviesSaga","GET_LIVESEARCH_MOVIES","getLiveSearchMoviesSaga","action","params","response","getMovies","data","Error","Search","totalMovies","totalResults","e"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,oBAAvD;AACA,SACEC,cADF,EAEEC,gBAFF,EAGEC,cAHF,EAIEC,0BAJF,EAKEC,wBALF,QAMO,WANP;AAOA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,GAAP,MAAgB,WAAhB;;AAEA,UAAUC,cAAV,GAA2B;AACzB,QAAMT,SAAS,CAACJ,KAAK,CAACc,UAAP,EAAmBC,aAAnB,CAAf;AACA,QAAMV,UAAU,CAACL,KAAK,CAACgB,qBAAP,EAA8BC,uBAA9B,CAAhB;AACD;;AAED,UAAUF,aAAV,CAAwBG,MAAxB,EAAgC;AAC9B,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAaD,MAAnB;AAEA,UAAME,QAAQ,GAAG,MAAMR,GAAG,CAACS,SAAJ,CAAc;AAAEF,MAAAA,MAAM,EAAE,EAAE,GAAGA;AAAL;AAAV,KAAd,CAAvB;;AACA,QAAIC,QAAQ,CAACE,IAAT,CAAcC,KAAlB,EAAyB;AACvB,YAAM,IAAIA,KAAJ,CAAUH,QAAQ,CAACE,IAAT,CAAcC,KAAxB,CAAN;AACD;;AAED,UAAMD,IAAI,GAAGF,QAAQ,CAACE,IAAT,CAAcE,MAA3B;AACA,UAAMC,WAAW,GAAGL,QAAQ,CAACE,IAAT,CAAcI,YAAlC;AACA,UAAMzB,GAAG,CAAC,CAACC,GAAG,CAACK,gBAAgB,CAACe,IAAD,CAAjB,CAAJ,EAA8BpB,GAAG,CAACI,cAAc,CAACmB,WAAD,CAAf,CAAjC,CAAD,CAAT;AACD,GAXD,CAWE,OAAOE,CAAP,EAAU;AACV,UAAMzB,GAAG,CAACM,cAAc,EAAf,CAAT;AACD;AACF;;AAED,UAAUS,uBAAV,CAAkCC,MAAlC,EAA0C;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAaD,MAAnB;;AACA,MAAI;AACF,UAAMf,KAAK,CAAC,GAAD,CAAX;AAEA,UAAMiB,QAAQ,GAAG,MAAMR,GAAG,CAACS,SAAJ,CAAc;AAAEF,MAAAA,MAAM,EAAE,EAAE,GAAGA;AAAL;AAAV,KAAd,CAAvB;;AACA,QAAIC,QAAQ,CAACE,IAAT,CAAcC,KAAlB,EAAyB;AACvB,YAAM,IAAIA,KAAJ,CAAUH,QAAQ,CAACE,IAAT,CAAcC,KAAxB,CAAN;AACD;;AAED,UAAMD,IAAI,GAAGF,QAAQ,CAACE,IAAT,CAAcE,MAA3B;AACA,UAAMvB,GAAG,CAAC,CACRC,GAAG,CAACO,0BAA0B,CAACa,IAAD,CAA3B,CADK,EAERpB,GAAG,CAACS,gBAAgB,CAACQ,MAAD,CAAjB,CAFK,CAAD,CAAT;AAID,GAbD,CAaE,OAAOQ,CAAP,EAAU;AACV,UAAM1B,GAAG,CAAC,CAACC,GAAG,CAACQ,wBAAwB,EAAzB,CAAJ,EAAkCR,GAAG,CAACS,gBAAgB,CAACQ,MAAD,CAAjB,CAArC,CAAD,CAAT;AACD;AACF;;AAED,eAAeN,cAAf","sourcesContent":["import { TYPES } from \"./types\";\nimport { all, put, delay, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport {\n  getTotalMovies,\n  getMoviesSuccess,\n  getMoviesError,\n  getLiveSearchMoviesSuccess,\n  getLiveSearchMoviesError,\n} from \"./actions\";\nimport { setSearchFilters } from \"../Search/actions\";\nimport api from \"../../api\";\n\nfunction* watchGetMovies() {\n  yield takeEvery(TYPES.GET_MOVIES, getMoviesSaga);\n  yield takeLatest(TYPES.GET_LIVESEARCH_MOVIES, getLiveSearchMoviesSaga);\n}\n\nfunction* getMoviesSaga(action) {\n  try {\n    const { params } = action;\n\n    const response = yield api.getMovies({ params: { ...params } });\n    if (response.data.Error) {\n      throw new Error(response.data.Error);\n    }\n\n    const data = response.data.Search;\n    const totalMovies = response.data.totalResults;\n    yield all([put(getMoviesSuccess(data)), put(getTotalMovies(totalMovies))]);\n  } catch (e) {\n    yield put(getMoviesError());\n  }\n}\n\nfunction* getLiveSearchMoviesSaga(action) {\n  const { params } = action;\n  try {\n    yield delay(400);\n\n    const response = yield api.getMovies({ params: { ...params } });\n    if (response.data.Error) {\n      throw new Error(response.data.Error);\n    }\n\n    const data = response.data.Search;\n    yield all([\n      put(getLiveSearchMoviesSuccess(data)),\n      put(setSearchFilters(params)),\n    ]);\n  } catch (e) {\n    yield all([put(getLiveSearchMoviesError()), put(setSearchFilters(params))]);\n  }\n}\n\nexport default watchGetMovies;\n"]},"metadata":{},"sourceType":"module"}